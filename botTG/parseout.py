from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import asyncio

# Authorized user IDs
AUTHORIZED_USERS = [1059096280]
TARGET_USER_ID = 1059096280
COOKIES_STATUS_FILE = "cookies_status.txt"
LAST_STATUS = None
GRADE_SELECTION = {}

# Function to read the content of a file
def read_file(filename):
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return file.read().strip()
    except FileNotFoundError:
        return None

# Function to generate the main menu keyboard
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(day, callback_data=f"day_{day}")] for day in [
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",  # Monday
            "–í—Ç–æ—Ä–Ω–∏–∫",      # Tuesday
            "–°—Ä–µ–¥–∞",        # Wednesday
            "–ß–µ—Ç–≤–µ—Ä–≥",      # Thursday
            "–ü—è—Ç–Ω–∏—Ü–∞",      # Friday
            "–°—É–±–±–æ—Ç–∞",      # Saturday
        ]
    ])

# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = main_menu_keyboard()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)

# Callback handler for button clicks
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("day_"):
        day = query.data.split("_")[1]
        day_file = f"{day}.txt"
        homework = read_file(day_file) or "–ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
        
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await query.edit_message_text(text=homework, reply_markup=reply_markup)
    elif query.data == "main_menu":
        reply_markup = main_menu_keyboard()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)

# Command to update homework
async def rem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rem <–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏> <—Ç–µ–∫—Å—Ç>")
        return

    day = context.args[0].capitalize()
    content = " ".join(context.args[1:])
    day_file = f"{day}.txt"
    
    with open(day_file, "w", encoding="utf-8") as file:
        file.write(content)
    
    await update.message.reply_text(f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {day} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

# Grade calculator command
async def calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    GRADE_SELECTION[user_id] = []
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏:\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 0.00", reply_markup=grade_keyboard(user_id))

# Function to generate grade selection keyboard
def grade_keyboard(user_id):
    grade_colors = {2: "üü•", 3: "üüß", 4: "üü®", 5: "üü©"}
    buttons = [[InlineKeyboardButton(f"{i} {grade_colors[i]}", callback_data=f"grade_{i}")] for i in range(2, 6)]
    buttons.append([InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_grades")])
    return InlineKeyboardMarkup(buttons)

# Callback handler for grade selection
async def grade_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    
    if query.data.startswith("grade_"):
        grade = int(query.data.split("_")[1])
        GRADE_SELECTION[user_id].append(grade)
    elif query.data == "clear_grades":
        GRADE_SELECTION[user_id] = []
    
    avg_grade = sum(GRADE_SELECTION[user_id]) / len(GRADE_SELECTION[user_id]) if GRADE_SELECTION[user_id] else 0
    
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏:\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_grade:.2f}", reply_markup=grade_keyboard(user_id))

# Monitor cookies_status.txt and notify user if status changes to false
async def monitor_cookies_status(application):
    global LAST_STATUS
    while True:
        current_status = read_file(COOKIES_STATUS_FILE)
        if LAST_STATUS == "True" and current_status == "False":
            async with application.bot:
                await application.bot.send_message(TARGET_USER_ID, "‚ö†Ô∏è –û–±–Ω–æ–≤–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—É–∫–∏!")
        elif LAST_STATUS == "False" and current_status == "True":
            async with application.bot:
                await application.bot.send_message(TARGET_USER_ID, "‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        LAST_STATUS = current_status
        await asyncio.sleep(10)  # Check every 10 seconds

# Main function to set up the bot
def main():
    application = ApplicationBuilder().token("7552852034:AAHElE-mJ8-3Q3BIslPBn5nX0yhbfhnjSEw").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rem", rem))
    application.add_handler(CommandHandler("calc", calc))
    application.add_handler(CallbackQueryHandler(button, pattern="^day_.*|main_menu$"))
    application.add_handler(CallbackQueryHandler(grade_selection, pattern="^grade_.*$|^clear_grades$"))

    loop = asyncio.get_event_loop()
    loop.create_task(monitor_cookies_status(application))
    
    application.run_polling()

if __name__ == "__main__":
    main()